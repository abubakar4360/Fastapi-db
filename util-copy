from passlib.context import CryptContext
from datetime import datetime, timedelta
from jose import jwt
from typing import Union, Any
import secrets


JWT_SECRET_KEY = secrets.token_hex(32)
JWT_REFRESH_SECRET_TOKEN = secrets.token_hex(32)
REFRESH_TOKEN_EXPIRE_MINUTES = 24*60
ACCESS_TOKEN_EXPIRE_MINUTES = 30

ALGORITHM = 'HS256'

pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')

def get_password_hash(passowrd: str) -> str:
    return pwd_context.hash(passowrd)

def verify_password(password: str, hash_password: str) -> bool:
    return pwd_context.verify(password, hash_password)

def create_access_token(subject: Union[str, Any], expires_delta: timedelta = None) -> str:
    if expires_delta is None:
        expires_delta = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)

    to_encode = {'sub': str(subject), 'exp': datetime.utcnow() + expires_delta}
    encoded_jwt = jwt.encode(to_encode, JWT_SECRET_KEY, algorithm=ALGORITHM)

    return encoded_jwt

def create_refresh_token(subject: Union[str | Any], expires_delta: timedelta = None) -> str:
    if expires_delta is None:
        expires_delta = timedelta(minutes=REFRESH_TOKEN_EXPIRE_MINUTES)

    to_encode = {'sub': str(subject), 'exp': datetime.utcnow() + expires_delta}
    encoded_jwt = jwt.encode(to_encode, JWT_REFRESH_SECRET_TOKEN, algorithm=ALGORITHM)

    return encoded_jwt

def create_reset_token(email: str) -> str:
    expire = datetime.utcnow() + timedelta(minutes=REFRESH_TOKEN_EXPIRE_MINUTES)
    to_encode = {'sub': email, 'exp': expire}
    encoded_jwt = jwt.encode(to_encode, RESET_SECRET_KEY, ALGORITHM)
    return encoded_jwt

